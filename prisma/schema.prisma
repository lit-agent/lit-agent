// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// todo: 会stuck at `validating type`
// generator zod {
//   provider = "zod-prisma-types"
//   useMultipleFiles = false // default is false
// }

/// Always after the prisma-client-js generator
generator json {
  provider = "prisma-json-types-generator"
  // namespace = "PrismaJson"
  // clientOutput = "<finds it automatically>"
  // (./ -> relative to schema, or an importable path to require() it)
}

/// 模型排序依据：Ascii Order

/// 业务建表逻辑：
/// 1. 账号：VerificationToken --> Account --> User --> Session
/// 2. 博主 --> 博主发布的任务 --- 用户关注的任务 --- 用户
/// 3. 博主 --> 博主发布的产品 --- 用户关注的产品 --- 用户
/// 4. 博主 --> 博主发布的产品 --> 用户的订单 <-- 用户

/// todo: user action

/// other

// for auth
model Account {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// user 购买 product，会形成 bill
model Bill {
  id        String   @id @default(cuid())
  createdAt DateTime @updatedAt
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // 用户的 bill 也可以是直接充钱的结果，此时就没有对应的product
  // todo: SKU 以及 现金的 entity 划分
  product      Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String?
  productCount Int?

  // 以分为单位，单位产品的价格
  price Int

  redeemType RedeemType

  paymentStatus PaymentStatus @default(PAID)
  // userActions UserAction[]
}

enum BillStatus {
  NotCreated
  Created
  Paid
  Pay
}

// 用户徽章，每个徽章可以有自己的一些信息，通过 id 与程序的UI对接
model Honor {
  id        HonorType @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

enum HonorType {
  NewUser

  NewTask

  GoodFriend
  HotFriend

  GoodFriendEver
  HotFriendEver
}

// 用户群聊消息
model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// [MessageBody]
  body Json

  // 1. user  chat: getChatId
  // 2. group chat: roomId
  channelId String?

  // 发送
  fromUser   User   @relation("from", fields: [fromUserId], references: [id], onDelete: Cascade)
  fromUserId String

  // 接收
  room   Room?   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId String?

  toUser   User?   @relation("to", fields: [toUserId], references: [id], onDelete: SetNull)
  toUserId String?

  mentionUsers User[] @relation("mention")

  // 引用
  refer    Message?  @relation("refer", fields: [referId], references: [id], onDelete: SetNull)
  referId  String?
  referred Message[] @relation("refer")

  userMessages UserMessage[]

  // 博主发布的任务到这
  task   Task?   @relation(fields: [taskId], references: [id], onDelete: SetNull)
  taskId String? @unique

  isAI Boolean @default(false)
}

enum PaymentStatus {
  // --- non-final

  CREATING
  CREATED

  // --- final

  // suceess
  PAID

  // 支付失败并且已经成功冲正
  PAY_CANCELED

  // 已成功全额退款
  REFUNDED

  // 已成功部分退款
  PARTIAL_REFUNDED

  // 客户端发起撤单成功
  CANCELED

  // 南川@2024-02-14
  PAY_ERROR
}

// 博主发布的产品
model Product {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fromUser   User   @relation(fields: [fromUserId], references: [id], onDelete: Cascade)
  fromUserId String
  // @Deprecated 本来是用来记录购买人的，后来改成基于bill了

  toUsers UserProduct[]

  images      String[]
  title       String
  description String // 博主的留言
  detail      String // markdown

  price Int // 火值
  // total - buyers.length = 库存
  total Int
  sold  Int @default(0)

  isOnsite              Boolean? // 是否线下运营
  isSelfOperating       Boolean? // 是否自营
  isReturnable          Boolean? // 是否可退换
  isReservationRequired Boolean? // 是否需要预约

  bills Bill[]
}

enum RedeemType {
  currency
  fire
}

model Room {
  id        String   @id @default(cuid())
  createdAt DateTime @updatedAt
  updatedAt DateTime @updatedAt

  users User[]

  // room 可以 没有 task，但当对应的task删除时自身也该删除
  task   Task?   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String? @unique

  messages Message[]
}

// for auth
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 博主发布的任务
model Task {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String     @default("Untitled")
  images      String[]
  description String?
  detail      String?
  value       Int // 每个任务价值多少火币
  startTime   DateTime   @default(now())
  endTime     DateTime
  status      TaskStatus
  platform    String?    @default("不孤岛")
  target      String? // 目标群体
  purpose     String? // 目标结果

  fromUser   User       @relation(fields: [fromUserId], references: [id], onDelete: Cascade)
  fromUserId String
  toUsers    UserTask[]

  // 包含发送到chat页的welcome，以及用户的评论
  sentMessage Message?

  room Room?

  // 提交任务后的结果显示
  /// [TaskResult]
  result Json?
}

enum TaskStatus {
  wait
  on
  pause
  cancelled
  finished
}

/// 一些线程追踪，用于持久化，比如订单
model Thread {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status ThreadStatus @default(running)
  data   Json
}

enum ThreadStatus {
  running
  finished
  cancelled
}

/// most important
model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // auth
  accounts      Account[]
  sessions      Session[]
  emailVerified DateTime?
  phoneVerified DateTime?
  validated     Boolean   @default(false) // 是否通过验证

  // basic info
  name        String?
  nameUpdated DateTime?

  email  String?    @unique
  phone  String?    @unique
  image  String?
  status UserStatus @default(offline)
  type   UserType   @default(user)

  // platform
  honors Honor[]

  // chat
  messages          UserMessage[] // 做分类用
  sentMessages      Message[]     @relation("from")
  receivedMessages  Message[]     @relation("to")
  mentionedMessages Message[]     @relation("mention")

  // tasks
  fromTasks Task[]
  toTasks   UserTask[]

  // products
  fromProducts Product[]
  toProducts   UserProduct[]
  bills        Bill[]

  // actions  UserAction[]

  fromRelations UserRelation[] @relation("to")
  toRelations   UserRelation[] @relation("from")

  rooms Room[]

  // balance
  totalEarnedFire   Int @default(0)
  currentEarnedFire Int @default(0)
  balance           Int @default(0)
}

// model UserAction {
//   id        String   @id @default(cuid())
//   createdAt DateTime @updatedAt
//
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId String
//
//   type UserActionType
//
//   task   ConsumerTask? @relation(fields: [taskId], references: [id])
//   taskId String?
//
//   product  ProducerProduct? @relation(fields: [prductId], references: [id])
//   prductId String?
//
//   bill   Bill?   @relation(fields: [billId], references: [id])
//   billId String?
// }

enum UserActionType {
  // account
  activate
  deactivate
  online
  offline

  // producer's task/product
  create
  pause
  continue
  cancel

  // consumer's task/product
  approve
  reject

  // consumer's task
  accept
  submit

  // consumer's product
  favor
  unfavor
  payByCash
  payByFire
}

/// @Depreciated
/// 这个表的重要性，在于聊天列表页，可以方便做通知和排序
/// 但是成本太高了，每条消息会导致O(n)的建表，还是弃用了！
model UserMessage {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String

  isSender    Boolean
  isReceiver  Boolean
  isMentioned Boolean
  isQuoted    Boolean

  @@id([userId, messageId])
}

// 消费者与博主开发的产品之间的关系
model UserProduct {
  createdAt DateTime @updatedAt
  updatedAt DateTime @updatedAt

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  isFavored Boolean @default(false)
  inCar     Int     @default(0)
  bought    Int     @default(0)

  // userActions UserAction[]
  @@id([userId, productId])
}

model UserRelation {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fromUser   User   @relation("from", fields: [fromUserId], references: [id], onDelete: Cascade)
  fromUserId String

  toUser   User   @relation("to", fields: [toUserId], references: [id], onDelete: Cascade)
  toUserId String

  // 粉丝
  isFans Boolean @default(false)

  // 拉黑
  isBlocking Boolean @default(false)

  @@id([fromUserId, toUserId])
}

enum UserStatus {
  online
  busy
  offline
}

// 消费者与博主发布的任务之间的关系
model UserTask {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  status UserTaskStatus @default(finished)

  content String?
  // 提交的图片
  images  String[]
  passed  Boolean?

  // actions UserAction[]

  // todo: bind message with taskFrom, taskTo, room
  @@id([taskId, userId])
}

enum UserTaskStatus {
  finished // 默认完成
  goon
  cancelled
}

enum UserType {
  user
  assistant
  blogger
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
