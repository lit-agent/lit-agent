// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

generator zod {
  provider = "zod-prisma-types"
}

/// Ascii Order

model Account {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Honor {
  id        HonorType @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

enum HonorType {
  NewUser

  NewTask

  GoodFriend
  HotFriend

  GoodFriendEver
  HotFriendEver
}

model Message {
  // todo: keep message even user/room deleted
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String?

  sender   User?   @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId String?

  // 任何消息都必然有room，否则是通知
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId String
}

model Post {
  id     String       @id @default(uuid())
  name   String
  text   String
  source PosterSource @default(RAW)

  // To return `Date`s intact through the API we need to add data transformers
  // https://trpc.io/docs/v11/data-transformers
  createdAt DateTime @unique @default(now())
  updatedAt DateTime @unique @default(now())
}

model Room {
  id       String    @id @default(cuid())
  name     String?   @unique
  users    User[]
  messages Message[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PosterSource {
  RAW
  GITHUB
}

model Product {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 1. 发行 2. 兑换 3. 收藏 4. 购物车 5. 已买
  users User[]

  images      String[]
  title       String
  description String // 博主的留言
  detail      String // markdown

  price Int // 火值
  // total - buyers.length = 库存
  total Int

  isOnsite              Boolean? // 是否线下运营
  isSelfOperating       Boolean? // 是否自营
  isReturnable          Boolean? // 是否可退换
  isReservationRequired Boolean? // 是否需要预约

  userProductBills   UserProductBill[]
  userProductActions UserProductAction[]
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String?
  validated     Boolean?  @default(false) // 是否通过验证
  email         String?   @unique
  emailVerified DateTime?
  phone         String?   @unique
  phoneVerified DateTime?

  image  String?
  status UserStatus @default(offline)
  type   UserType   @default(user)

  currentBalance Int @default(0)
  historyBalance Int @default(0)

  room Room[]

  accounts Account[]
  sessions Session[]
  actions  UserAction[]
  messages Message[]
  honors   Honor[]

  products           Product[]
  userProductActions UserProductAction[]
  userProductBills   UserProductBill[]

  tasks     Task[]
  userTasks UserTask[]
}

model UserAction {
  id        String   @id @default(cuid())
  createdAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  type UserActionType
}

enum UserActionType {
  activate
  deactivate

  online
  offline // 不可靠
}

// user-product 是一对多，但bill是一对一
model UserProductBill {
  id        String   @id @default(cuid())
  createdAt DateTime @updatedAt
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model UserProductAction {
  id        String   @id @default(cuid())
  createdAt DateTime @updatedAt
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  product   Product @relation(fields: [productId], references: [id])
  productId String

  actionType UserProductActionType
}

enum UserProductActionType {
  // 卖家
  on // 上架
  off // 下架
  pause // 暂停
  resume // 继续

  // 买家
  favor
  unfavor
  clickCashBuy
  clickVirtualBuy
  buy
  cancelBuy
}

enum UserStatus {
  online
  busy
  offline
}

// user 和 task 是 一对一
model UserTask {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  task   Task   @relation(fields: [taskId], references: [id])
  taskId String

  action UserTaskActionType
  status UserTaskStatus
}

enum UserTaskStatus {
  // producer
  on
  off
  paused

  //   consumer
  goon
  finished
  cancelled
}

enum UserTaskActionType {
  on
  off
  pause
  continue

  comment
  modifyComment
  deleteComment
  favorComment
  replyComment

  favorTask
  unfavorTAsk
}

enum UserType {
  user
  assistant
  blogger
}

model Task {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     User[]
  userTasks UserTask[]

  type    TaskType
  content String // 根据task-type进行解析
  value   Int // 每个任务价值多少火币
  ddl     DateTime // 任务有截止时间
}

enum TaskType {
  broadcast // 帮作品传播
  textChoices
  imageChoices
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
