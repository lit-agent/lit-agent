// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

generator zod {
  provider = "zod-prisma-types"
}

/// [Models] 

model Account {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Message {
  // todo: keep message even user/room deleted
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String?

  sender   User?   @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId String?

  // 任何消息都必然有room，否则是通知
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId String
}

model Post {
  id     String       @id @default(uuid())
  name   String
  text   String
  source PosterSource @default(RAW)

  // To return `Date`s intact through the API we need to add data transformers
  // https://trpc.io/docs/v11/data-transformers
  createdAt DateTime @unique @default(now())
  updatedAt DateTime @unique @default(now())
}

model Room {
  id       String    @id @default(cuid())
  name     String?   @unique
  users    User[]
  messages Message[]

  task Task?
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 1. 发行 2. 兑换 3. 收藏 4. 购物车 5. 已买
  issuer   User   @relation(fields: [issuerId], references: [id], name: "issue") // 发行者（唯一）
  issuerId String
  favors   User[] @relation(name: "favor")
  tobuyers User[] @relation("tobuy")
  buyers   User[] @relation("bought")

  images      String[]
  title       String
  description String // 博主的留言
  detail      String // markdown

  price                 Int // 火值
  isOnsite              Boolean? // 是否线下运营
  isSelfOperating       Boolean? // 是否自营
  isReturnable          Boolean? // 是否可退换
  isReservationRequired Boolean? // 是否需要预约
  // total - buyers.length = 库存
  total                 Int

  // 一个产品必有room，但有room不一定有product
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId String @unique
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String?
  validated     Boolean?  @default(false) // 是否通过验证
  email         String?   @unique
  emailVerified DateTime?
  phone         String?   @unique
  phoneVerified DateTime?

  image  String?
  status UserStatus @default(offline)
  type   UserType   @default(user)

  balance Int @default(0)

  room Room[]

  accounts Account[]
  sessions Session[]
  actions  UserAction[]
  messages Message[]

  issuedTasks   Task[] @relation(name: "issue")
  favoriteTasks Task[] @relation(name: "favor")
  tobuyTasks    Task[] @relation("tobuy")
  boughtTasks   Task[] @relation("bought")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// [Enums] 

//【测试socket用】post
enum PosterSource {
  RAW
  GITHUB
}

model UserAction {
  id        String   @id @default(cuid())
  createdAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  type UserActionType
}

enum UserActionType {
  activate
  deactivate

  online
  offline // 不可靠
}

enum UserStatus {
  online
  busy
  offline
}

enum UserType {
  user
  assistant
  blogger
}
