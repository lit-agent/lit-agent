// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Account {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String?
  validated     Boolean?  @default(false) // 是否通过验证
  email         String?   @unique
  emailVerified DateTime?
  phone         String?   @unique
  phoneVerified DateTime?

  image  String?
  status UserStatus @default(offline)
  roomId String?
  type   UserType   @default(user)

  room     Room?        @relation(fields: [roomId], references: [id])
  accounts Account[]
  sessions Session[]
  actions  UserAction[]
  messages Message[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserType {
  user
  assistant
  blogger
}

model UserAction {
  id        String   @id @default(cuid())
  createdAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  type UserActionType
}

enum UserStatus {
  online
  busy
  offline
}

enum UserActionType {
  activate
  deactivate

  online
  offline // 不可靠
}

model Room {
  id       String    @id @default(cuid())
  name     String?   @unique
  users    User[]
  messages Message[]
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text   String?
  userId String?
  roomId String?

  // todo: keep message even user/room deleted
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  room Room? @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

/// --- post
enum PosterSource {
  RAW
  GITHUB
}

model Post {
  id     String       @id @default(uuid())
  name   String
  text   String
  source PosterSource @default(RAW)

  // To return `Date`s intact through the API we need to add data transformers
  // https://trpc.io/docs/v11/data-transformers
  createdAt DateTime @unique @default(now())
  updatedAt DateTime @unique @default(now())
}
