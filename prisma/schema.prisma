// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

generator zod {
  provider = "zod-prisma-types"
}

/// 模型排序依据：Ascii Order

/// 业务建表逻辑：
/// 1. 账号：VerificationToken --> Account --> User --> Session
/// 2. 博主 --> 博主发布的任务 <-- 用户执行的任务 <-- 用户
/// 3. 博主 --> 博主发布的产品 <-- 用户收藏/下单的产品 <-- 用户

/// todo: user action

// for auth
model Account {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// user 购买 product，会形成 bill
model Bill {
  id        String   @id @default(cuid())
  createdAt DateTime @updatedAt
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  product   ProductFrom @relation(fields: [productId], references: [id])
  productId String

  // userActions UserAction[]
}

// 用户徽章，每个徽章可以有自己的一些信息，通过 id 与程序的UI对接
model Honor {
  id        HonorType @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

enum HonorType {
  NewUser

  NewTask

  GoodFriend
  HotFriend

  GoodFriendEver
  HotFriendEver
}

// 用户群聊消息
model Message {
  // todo: keep message even user/room deleted
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String?

  sender   User?   @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId String?

  // 任何消息都必然有room，否则是通知
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId String
}

// for test
model Post {
  id     String       @id @default(uuid())
  name   String
  text   String
  source PosterSource @default(RAW)

  // To return `Date`s intact through the API we need to add data transformers
  // https://trpc.io/docs/v11/data-transformers
  createdAt DateTime @unique @default(now())
  updatedAt DateTime @unique @default(now())
}

// for test
enum PosterSource {
  RAW
  GITHUB
}

// 博主发布的产品
model ProductFrom {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fromUser   User        @relation(fields: [fromUserId], references: [id])
  fromUserId String
  toUsers    ProductTo[]

  images      String[]
  title       String
  description String // 博主的留言
  detail      String // markdown

  price Int // 火值
  // total - buyers.length = 库存
  total Int

  isOnsite              Boolean? // 是否线下运营
  isSelfOperating       Boolean? // 是否自营
  isReturnable          Boolean? // 是否可退换
  isReservationRequired Boolean? // 是否需要预约

  bills Bill[]
}

// 消费者与博主开发的产品之间的关系
model ProductTo {
  id        String   @id @default(cuid())
  createdAt DateTime @updatedAt
  updatedAt DateTime @updatedAt

  fromUser   ProductFrom @relation(fields: [fromUserId], references: [id])
  fromUserId String

  toUser   User   @relation(fields: [toUserId], references: [id])
  toUserId String

  isFavored Boolean @default(false)
  inCar     Int     @default(0)
  bought    Int     @default(0)

  // userActions UserAction[]
}

// 博主发布的产品
model TaskFrom {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type    TaskType
  title   String
  content String // 根据task-type进行解析
  value   Int // 每个任务价值多少火币
  ddl     DateTime // 任务有截止时间

  fromUser   User     @relation(fields: [fromUserId], references: [id])
  fromUserId String
  toUsers    TaskTo[]

  status TaskStatus
}

enum TaskStatus {
  wait
  on
  pause
  cancelled
  finished
}

// 消费者与博主发布的任务之间的关系
model TaskTo {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  task   TaskFrom @relation(fields: [taskId], references: [id])
  taskId String

  status TaskToStatus

  // actions UserAction[]
}

enum TaskToStatus {
  goon
  finished
  cancelled
}

enum TaskType {
  broadcast // 帮作品传播
  textChoices
  imageChoices
}

// 聊天室
model Room {
  id       String    @id @default(cuid())
  name     String?   @unique
  users    User[]
  messages Message[]
}

// for auth
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // auth
  accounts      Account[]
  sessions      Session[]
  emailVerified DateTime?
  phoneVerified DateTime?
  validated     Boolean?  @default(false) // 是否通过验证

  // basic info
  name   String?
  email  String?    @unique
  phone  String?    @unique
  image  String?
  status UserStatus @default(offline)
  type   UserType   @default(user)

  // balance
  currentBalance Int @default(0)
  historyBalance Int @default(0)

  // platform
  honors Honor[]

  // chat
  room     Room[]
  messages Message[]

  // tasks
  fromTasks TaskFrom[]
  toTasks   TaskTo[]

  // products
  fromProducts ProductFrom[]
  toProducts   ProductTo[]
  bills        Bill[]

  // actions  UserAction[]
}

// model UserAction {
//   id        String   @id @default(cuid())
//   createdAt DateTime @updatedAt
//
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId String
//
//   type UserActionType
//
//   task   ConsumerTask? @relation(fields: [taskId], references: [id])
//   taskId String?
//
//   product  ProducerProduct? @relation(fields: [prductId], references: [id])
//   prductId String?
//
//   bill   Bill?   @relation(fields: [billId], references: [id])
//   billId String?
// }

enum UserActionType {
  // account
  activate
  deactivate
  online
  offline

  // producer's task/product
  create
  pause
  continue
  cancel

  // consumer's task/product
  approve
  reject

  // consumer's task
  accept
  submit

  // consumer's product
  favor
  unfavor
  payByCash
  payByFire
}

enum UserStatus {
  online
  busy
  offline
}

enum UserType {
  user
  assistant
  blogger
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
